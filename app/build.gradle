apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

def relStorePassword = System.getenv("RELEASE_STORE_PASSWORD")
def relKeyPassword = System.getenv("RELEASE_KEY_PASSWORD")
def relKeyAlias = System.getenv("RELEASE_KEY_ALIAS")

def keystorePath = System.getenv('PWD') + "/app/keystore.jks"
def keystore = file(keystorePath).exists() ? file(keystorePath) : null
android {
    compileSdkVersion COMPILE_SDK_VERSION
    defaultConfig {
        applicationId "com.appttude.h_mal.farmr"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 2
        versionName "2.0"
        testInstrumentationRunner 'com.appttude.h_mal.farmr.application.TestRunner'
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            storePassword relStorePassword
            keyPassword relKeyPassword
            keyAlias relKeyAlias
            storeFile keystore
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    useLibrary 'android.test.mock'
}

dependencies {
    implementation "androidx.legacy:legacy-support-v4:$LEGACY_SUPPORT_VERSION"
    implementation "androidx.vectordrawable:vectordrawable:$VECTOR_DRAW_VERSION"
    implementation "androidx.core:core-ktx:$CORE_KTX_VERSION"
    implementation "androidx.appcompat:appcompat:$MATERIAL_VERSION"
    implementation "com.google.android.material:material:$MATERIAL_VERSION"
    implementation "androidx.constraintlayout:constraintlayout:$CONSTR_LAYOUT_VERSION"
    implementation "androidx.fragment:fragment-ktx:$VIEW_KTX_VERSION"
    implementation "androidx.activity:activity-ktx:$VIEW_KTX_VERSION"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$VIEWMODEL_VERSION"
    implementation "androidx.preference:preference:$PREFERENCES_VERSION"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    / * Unit testing * /
    testImplementation "junit:junit:$JUNIT_VERSION"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$KOTLIN_VERSION"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$KOTLIN_VERSION"
    implementation "org.jetbrains.kotlin:kotlin-test:$KOTLIN_VERSION"
    androidTestImplementation "androidx.test:core-ktx:$TEST_KTX_VERSION"
    androidTestImplementation "androidx.test:rules:$TEST_KTX_VERSION"
    / * mockito and livedata testing * /
    testImplementation "org.mockito:mockito-inline:$MOKITO_INLINE_VERSION"
    testImplementation "androidx.arch.core:core-testing:$CORE_TEST_VERSION"
    / * MockK * /
    testImplementation "io.mockk:mockk:$MOCKK_VERSION"
    androidTestImplementation "io.mockk:mockk-android:$MOCKK_VERSION"
    / * Android Espresso * /
    androidTestImplementation "androidx.test.ext:junit:$TEST_JUNIT_VERSION"
    androidTestImplementation "androidx.test.espresso:espresso-core:$ESPRESSO_VERSION"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$ESPRESSO_VERSION"
    implementation "androidx.test.espresso:espresso-idling-resource:$ESPRESSO_VERSION"
    androidTestImplementation "androidx.test:runner:$TEST_RUNNER_VERSION"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$ESPRESSO_VERSION"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$ESPRESSO_VERSION"
    androidTestImplementation "org.hamcrest:hamcrest:$HAMCREST_VERSION"
    / * Room database * /
    implementation "androidx.room:room-runtime:$ROOM_VERSION"
    kapt "androidx.room:room-compiler:$ROOM_VERSION"
    implementation "androidx.room:room-ktx:$ROOM_VERSION"
    / *Kodein Dependency Injection * /
    implementation "org.kodein.di:kodein-di-generic-jvm:$KODEIN_VERSION"
    implementation "org.kodein.di:kodein-di-framework-android-x:$KODEIN_VERSION"
    / * jxl * /
    implementation "net.sourceforge.jexcelapi:jxl:$JEXCEL_VERSION"
}
